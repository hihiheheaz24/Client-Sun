{
  "ver": "1.0.27",
  "uuid": "26bc697d-a564-4511-8484-6afd8768554b",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n  precision highp float;\n#if USE_ALPHA_TEST\n#endif\n  varying vec4 v_color;\n  #if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n  uniform vec2 iResolution;\n  uniform sampler2D iChannel0;\n  const int   c_samplesX    = 15;\n  const int   c_samplesY    = 15;\n  const float c_textureSize = 512.0;\n  const int   c_halfSamplesX = c_samplesX / 2;\n  const int   c_halfSamplesY = c_samplesY / 2;\n  const float c_pixelSize = (1.0 / c_textureSize);\nfloat Gaussian (float sigma, float x)\n{\n    return exp(-(x*x) / (2.0 * sigma*sigma));\n}\nvec3 BlurredPixel (in vec2 uv)\n{\n    float c_sigmaX      = 500.0;\n    float c_sigmaY      = 1.0;\n    float total = 0.0;\n    vec3 ret = vec3(0);\n    for (int iy = 0; iy < c_samplesY; ++iy)\n    {\n        float fy = Gaussian (c_sigmaY, float(iy) - float(c_halfSamplesY));\n        float offsety = float(iy-c_halfSamplesY) * c_pixelSize;\n        for (int ix = 0; ix < c_samplesX; ++ix)\n        {\n            float fx = Gaussian (c_sigmaX, float(ix) - float(c_halfSamplesX));\n            float offsetx = float(ix-c_halfSamplesX) * c_pixelSize;\n            total += fx * fy;\n            ret += texture2D(iChannel0, uv + vec2(offsetx, offsety)).rgb * fx*fy;\n        }\n    }\n    return ret / total;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord.xy / iResolution.xy * vec2(1,-1);\n  fragColor = vec4(BlurredPixel(uv), 1.0);\n}\nvoid main () {\n  mainImage(gl_FragColor,v_uv0.xy);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n  precision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\n  in vec4 v_color;\n  #if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n  uniform aura {\n  vec2 iResolution;\n  float iTime;\n  };\n  uniform sampler2D iChannel0;\n  const int   c_samplesX    = 15;\n  const int   c_samplesY    = 15;\n  const float c_textureSize = 512.0;\n  const int   c_halfSamplesX = c_samplesX / 2;\n  const int   c_halfSamplesY = c_samplesY / 2;\n  const float c_pixelSize = (1.0 / c_textureSize);\nfloat Gaussian (float sigma, float x)\n{\n    return exp(-(x*x) / (2.0 * sigma*sigma));\n}\nvec3 BlurredPixel (in vec2 uv)\n{\n    float c_sigmaX      = 500.0;\n    float c_sigmaY      = 1.0;\n    float total = 0.0;\n    vec3 ret = vec3(0);\n    for (int iy = 0; iy < c_samplesY; ++iy)\n    {\n        float fy = Gaussian (c_sigmaY, float(iy) - float(c_halfSamplesY));\n        float offsety = float(iy-c_halfSamplesY) * c_pixelSize;\n        for (int ix = 0; ix < c_samplesX; ++ix)\n        {\n            float fx = Gaussian (c_sigmaX, float(ix) - float(c_halfSamplesX));\n            float offsetx = float(ix-c_halfSamplesX) * c_pixelSize;\n            total += fx * fy;\n            ret += texture(iChannel0, uv + vec2(offsetx, offsety)).rgb * fx*fy;\n        }\n    }\n    return ret / total;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord.xy / iResolution.xy * vec2(1,-1);\n  fragColor = vec4(BlurredPixel(uv), 1.0);\n}\nvoid main () {\n  mainImage(gl_FragColor,v_uv0.xy);\n}"
      }
    }
  ],
  "subMetas": {}
}