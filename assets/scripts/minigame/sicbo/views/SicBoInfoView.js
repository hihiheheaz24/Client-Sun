/*
 * Generated by BeChicken
 * on 11/13/2019
 * version v1.0
 */
(function () {
    cc.SicBoInfoView = cc.Class({
        extends: cc.Component,
        properties: {
            NotiTime:cc.Animation,
            lbTime: cc.Label,
            lbDotTime:cc.Node,
            spCountDownHL:cc.Sprite,
            lbSessionID: cc.Label,
            nodeKey:cc.Node,
            nodeMd5:cc.Node,
            lbMD5:cc.Label,
            lbResult:cc.Label,
            lbKey:cc.Label,
            lbMD5Title:cc.Label,
            popupCopyMD5:cc.Node,
            lbStatus: cc.Label,
            lbTotalPlayer: cc.Label,
            lstPlayers: [cc.SicBoPlayer],
            skeletonBat: sp.Skeleton,
            skeletonThemThu: sp.Skeleton,
            skeletonMD5: sp.Skeleton,
            lbTotalUserWin: cc.Label,
            lastResult: cc.Node,
            spLightEffect:cc.Node,
            resultBanner:cc.Node,
            layoutVi:cc.Node,
            layoutBat:cc.Node,
            batNan:cc.Node,
        },
        onLoad: function () {
            this.controller = cc.SicBoController.getInstance();
            this.controller.setInfoView(this);

            this.activeTimer(false);
            this.showStatus(null);
            this.currentState = null;
            this.interval = null;
            this.time = 0;
            this.isBetting = false;
            this.currPlayer = this.lstPlayers[0];
            this.skeletonBat.node.active = true;
            this.skeletonThemThu.node.active = true;
            this.skeletonMD5.active = false;
            this.animTotalUserWin = this.lbTotalUserWin.node.getComponent(cc.Animation);
            this.getTopSessionWinners();
        },
        onEnable: function () {
            this.resetPlate();
        },
        onDestroy: function () {
            try {
                if (this.interval) {
                    clearInterval(this.interval);
                }
            } catch (e) {

            }
        },
        joinGame:function(data)
        {
            if (data.Phrase<5) {
                this.updateMD5(data.MD5);
            }
            else
            {
                this.updateMD5(data.KeyResult);
            }
            // if(data.Result){
            //     this.controller.onShowLastResult(data.Result);
            // }
        },
        //reset trang thai bat
        resetPlate: function () {
            this.batNan.active = false;
            this.batNan.position = cc.v2(0, 65);
            this.skeletonBat.node.active = true;
        },
        //Active trang thai bat cho phep nan
        activeOpenPlate: function () {
            let isNan = this.controller.getIsNan();
            this.batNan.active = isNan;
            this.batNan.getComponent(cc.Animation).play('batnanIdle');
            this.skeletonBat.node.active = !isNan;
        },
        forceOpenPlate: function (isAuto) {
            // this.nodeVi.active = true;
            let isNan = this.controller.getIsNan();
            if ((!isNan && isAuto)) {
                cc.director.getScheduler().schedule(function () {
                    this.batNan.active = false;
                    this.resultBanner.getComponent(cc.Animation).play("result_banner_open").wrapMode = cc.WrapMode.Normal;
                    cc.AudioController.getInstance().playSound(cc.AudioTypes.SICBO_OPEN_BAT);

                }.bind(this), this, 0, 0, 3, false);
                cc.director.getScheduler().schedule(function () {
                    this.resultBanner.getComponent(cc.Animation).play("result_banner_open").wrapMode = cc.WrapMode.Reverse;
                }.bind(this), this, 0, 0, 7, false);
                cc.director.getScheduler().schedule(function () {
                    this.spLightEffect.active = false;
                    this.skeletonBat.node.active = false;
                    this.playAnimBat(cc.SicBoAnim.IDLE_DEALER);
                    this.layoutBat.getComponent(cc.Animation).play("bat_move_center_open").wrapMode = cc.WrapMode.Reverse;
                    this.playAnimThemThu("idle2", false);
                }.bind(this), this, 0, 0, 9, false);
                cc.director.getScheduler().schedule(function () {
                    this.playAnimThemThu("idle1", true);
                }.bind(this), this, 0, 0, 10, false);
            }else if(!isAuto && isNan)
            {
                cc.director.getScheduler().schedule(function () {
                    this.batNan.active = false;
                    cc.AudioController.getInstance().playSound(cc.AudioTypes.SICBO_OPEN_BAT);
                    this.resultBanner.getComponent(cc.Animation).play("result_banner_open").wrapMode = cc.WrapMode.Normal;
                }.bind(this), this, 0, 0, 4, false);
                cc.director.getScheduler().schedule(function () {
                    this.resultBanner.getComponent(cc.Animation).play("result_banner_open").wrapMode = cc.WrapMode.Reverse;
                }.bind(this), this, 0, 0, 6, false);
                cc.director.getScheduler().schedule(function () {
                    this.spLightEffect.active = false;
                    this.skeletonBat.node.active = false;
                    this.playAnimBat(cc.SicBoAnim.IDLE_DEALER);
                    this.layoutBat.getComponent(cc.Animation).play("bat_move_center_open").wrapMode = cc.WrapMode.Reverse;
                    this.playAnimThemThu("idle2", false);
                }.bind(this), this, 0, 0, 7, false);
                cc.director.getScheduler().schedule(function () {
                    this.playAnimThemThu("idle1", true);
                }.bind(this), this, 0, 0, 8, false);
            } 
            else {
                this.batNan.active = false;
            }
        },
        playAnimBat: function (nameAnim) {
            //this.skeletonBat.node.active = true;
            this.skeletonBat.clearTracks();
            this.skeletonBat.setToSetupPose();
            this.skeletonBat.setAnimation(1, nameAnim, false);
        },
        playAnimThemThu: function(nameAnim, isLoop){
            this.skeletonThemThu.clearTracks();
            this.skeletonThemThu.setToSetupPose();
            this.skeletonThemThu.setAnimation(1, nameAnim, isLoop);
        },
        playDealerAnimXWin:function()
        {
            this.skeletonThemThu.clearTracks();
            this.skeletonThemThu.setToSetupPose();
            this.skeletonThemThu.setAnimation(6, 'win_big', false);
        },
        //Hub on notifyChangePhrase - Thong bao chuyen phien
        onNotifyChangePhrase: function (data) {
            this.dataCache = data;
            let state = parseInt(data.Phrase);
            switch (state) {
                case cc.SicBoPharse.None:
                    if (this.currentState !== state) {
                        this.controller.enableClickBet(false);
                        this.showStatus(null);
                    }
                    break;
                case cc.SicBoPharse.Waiting://Cho phien moi
                    if (this.currentState !== state) {
                        
                        this.showStatus("CHỜ PHIÊN MỚI");
                    }
                    
                    break;
                case cc.SicBoPharse.Shaking://Xoc
                    //Stop animation
                    this.controller.stopAnimationWin();
                    if (this.currentState !== state) {
                        this.resetPlate();
                        //Reset trang thai
                        this.controller.enableClickBet(false);
                        //Stop animation
                        // this.controller.stopAnimationWin();
                        //Clear chip
                        //Khoi tao lai paramchip
                        this.controller.initParamChips();
                        this.activeTimer(true);
                        this.controller.initChipsWin();
                        //Clear session truoc
                        this.controller.clearBetLog(this.controller.getBetLogSession());
                        //Tao session betlog
                        this.controller.setBetLogSession(this.controller.getBetLogSession() + 1);
                        this.resetPlayerUI();
                        this.updateTotalUserWin(null);
                        this.playAnimBat(cc.SicBoAnim.IDLE_DEALER);
                        this.controller.clearAllChips();
                        this.skeletonMD5.active = true;
                        this.skeletonMD5.setAnimation(1, "animation_md5", false);
                        this.updateMD5(data.MD5);
                        cc.director.getScheduler().schedule(function () {//them thu push
                            this.playAnimThemThu("push", false);
                        }.bind(this),this, 0, 0, 0, false);
                        cc.director.getScheduler().schedule(function () {//dia move to center
                            this.layoutBat.getComponent(cc.Animation).play("bat_move_center").wrapMode = cc.WrapMode.Normal;
                            this.playAnimThemThu("idle1", true);
                            cc.AudioController.getInstance().playSound(cc.AudioTypes.SICBO_SHOW_BAT);

                        }.bind(this), this, 0, 0, 1, false);
                        cc.director.getScheduler().schedule(function () {
                            this.playAnimBat(cc.SicBoAnim.SHAKING);
                            cc.AudioController.getInstance().playSound(cc.AudioTypes.SICBO_SHAKE);

                            this.skeletonMD5.active = false;
                        }.bind(this), this, 0, 0, 1.5, false);
                        cc.director.getScheduler().schedule(function () {
                            this.layoutBat.getComponent(cc.Animation).play("bat_move_center").wrapMode = cc.WrapMode.Reverse;
                            this.playAnimBat(cc.SicBoAnim.IDLE_DEALER);
                            this.playAnimThemThu("idle2", false);
                        }.bind(this), this, 0, 0, 3, false);
                        cc.director.getScheduler().schedule(function () {
                            this.playAnimThemThu("idle1", true);
                        }.bind(this), this, 0, 0, 4, false);
                        this.controller.enableClickBet(false);
                    }
                    break;
                case cc.SicBoPharse.Betting://Dat Cua
                    if (this.controller.isShowingBigWin()) {
                        this.controller.hideAnimationBigWin();
                    }
                    if (this.currentState !== state) {
                        this.resetPlate();
                        this.NotiTime.play('NotiWaitingBet').wrapMode = cc.WrapMode.Reverse;
                        cc.AudioController.getInstance().playSound(cc.AudioTypes.SICBO_START_BETTING);
                        this.isBetting = true;
                        this.controller.setWinResult(null);
                        this.controller.setWinVipResult(null);
                        this.controller.setTotalWinResult(null);
                        this.controller.enableClickBet(true);
                        this.activeTimer(true);
                        this.showStatus("ĐẶT CỬA");
                    }
                    break;
                case cc.SicBoPharse.EndBetting://Dat Cua
                    if (this.controller.isShowingBigWin()) {
                        this.controller.hideAnimationBigWin();
                    }
                    if (this.currentState !== state) {
                        this.NotiTime.play('NotiWaitingBet').wrapMode = cc.WrapMode.Normal;
                        this.controller.enableClickBet(false);
                        this.showStatus("HẾT THỜI GIAN ĐẶT");
                    }
                    break;
                case cc.SicBoPharse.OpenPlate://Mo bat
                    if (this.controller.isShowingBigWin()) {
                        this.controller.hideAnimationBigWin();
                    }
                    if (this.currentState !== state) {
                        this.controller.enableClickBet(false);
                        this.controller.setDicesResult(data);
                        cc.AudioController.getInstance().playSound(cc.AudioTypes.SICBO_STOP_BETTING);
                        this.isBetting = false;
                        this.activeTimer(false);
                        cc.director.getScheduler().schedule(function () {//them thu push
                            this.playAnimThemThu("push",false);
                        }.bind(this), this, 0, 0, 0, false);
                        cc.director.getScheduler().schedule(function () {//dia move to center
                            this.layoutBat.getComponent(cc.Animation).play("bat_move_center_open").wrapMode = cc.WrapMode.Normal;
                            this.skeletonBat.node.opacity = 255;
                            cc.AudioController.getInstance().playSound(cc.AudioTypes.SICBO_SHOW_BAT);
                            this.playAnimBat(cc.SicBoAnim.CLOSE_PLATE);
                            this.playAnimThemThu("idle1", true);
                        }.bind(this), this, 0, 0, 1, false);
                        cc.director.getScheduler().schedule(function () {
                            this.spLightEffect.active = true;
                            this.spLightEffect.getComponent(cc.Animation).play("light_rotate");
                            this.activeOpenPlate();
                            this.playAnimBat(cc.SicBoAnim.OPEN_PLATE);
                        }.bind(this), this, 0, 0, 2, false);
                        if(!this.controller.getIsNan())
                        {
                            this.forceOpenPlate(true);
                        }  
                        this.showStatus("MỞ BÁT");
                    }
                    break;
                case cc.SicBoPharse.ShowResult://Ket qua
                    if (this.currentState !== state) {
                        if (this.controller.isShowingBigWin()) {
                            this.controller.hideAnimationBigWin();
                        }
                        this.getTopSessionWinners();
                        this.forceOpenPlate(false);
                        this.controller.enableClickBet(false);
                        cc.director.getScheduler().schedule(function () {
                            this.controller.onShowResult(data);
                            this.showStatus(null);
                            this.skeletonMD5.active = true;
                            this.skeletonMD5.setAnimation(1, "animation_key", false);
                            this.updateMD5(data.KeyResult);
                        }.bind(this), this, 0, 0, 8, false);
                        cc.director.getScheduler().schedule(function () {
                            this.skeletonMD5.active = false;
                        }.bind(this), this, 0, 0, 10, false);
                    }
                    
                    break;
            }
            this.controller.setCurrentState(state);
            this.currentState = state;
            this.updateSessionId(data.SessionID);
            
            //Cap nhat tong tien bet
            this.controller.updateTotalBet(data);
        },
        //Cap nhat thong tin game
        updateSessionInfo: function (data) {
        },
        //Cap nhat so luong nguoi choi ko ngoi trong ban
        updatePlayersInGame: function (totalPlayer) {
            this.lbTotalPlayer.string = totalPlayer;
        },

        resetPlayerUI: function () {
            this.lstPlayers.map(player => {
                player.hideWinAmount();
            }, this)
        },
        //Cap nhat thong tin nguoi choi hien tai
        updatePlayerInfor: function (dataPlayer) {
            this.currPlayer.registerPlayer(dataPlayer.Account);
        },
        getTopSessionWinners: function () {
            let getBigWinnersCommand = new cc.SicBoWinnerCommand;
            getBigWinnersCommand.execute(this);
        },

        onGetBigWinnerResponse: function (response) {
            this.controller.setAccountTop(response);
        },
        //Cap nhat thong tin player
        updatePlayersUI: function (dataPlayers) {
            this.positionsUI = [0, 0, 0, 0, 0, 0, 0];
            let countPlayer = 0;
            this.positionsUI[countPlayer] = cc.LoginController.getInstance().getUserId();
            countPlayer++;
            dataPlayers.map(player => {
                if (player.AccountID != cc.LoginController.getInstance().getUserId()) {
                    if (countPlayer <= 6) {
                        this.positionsUI[countPlayer] = player.AccountID;
                        countPlayer++;
                    }
                }
            }, this);

            //Hien thi player
            this.positionsUI.forEach(function (accID, index) {
                if (accID != 0) {
                    try {
                        let playerInfo = dataPlayers.filter(player => player.AccountID == accID);
                        //Loai tru player hien tai
                        if (playerInfo.length > 0 && index != 0) {
                            this.lstPlayers[index].registerPlayer(playerInfo[0].Account);
                        }
                    } catch (e) {
                        console.log(e);
                    }
                } else {
                    try {
                        //Reset lai vi tri cua player
                        this.lstPlayers[index].unRegisterPlayer();
                    } catch (e) {
                        console.log(e);
                    }
                }
            }, this);
            this.controller.updatePositionPlayerUI(this.positionsUI);
        },
        //Cap nhat balance cua player hien tai
        updateBalanceCurrPlayer: function (balance) {
            this.currPlayer.updateChipNormal(balance);
        },
        //Cap nhat balance player khac
        updateBalancePlayer: function (data) {
            let accID = data[0];
            let balance = data[3];
            if (this.positionsUI) {
                let indexPlayer = this.positionsUI.indexOf(accID);
                if (indexPlayer != -1) {
                    this.lstPlayers[indexPlayer].updateChip(balance);
                }
            }

        },
        //Hien thi ket qua thang
        winResult: function (data) {
            this.currPlayer.showWinAmount(data.Award, data.Balance);
            cc.BalanceController.getInstance().updateRealBalance(data.Balance);
        },
        //Hien thi tien thang cua nguoi choi ngoi trong ban
        winResultVip: function (data) {
            data.map(player => {
                //Kiem tra player co trong mang hay ko
                if (this.positionsUI.includes(player.AccountID) && player.AccountID != cc.LoginController.getInstance().getUserId()) {
                    let indexPlayer = this.positionsUI.indexOf(player.AccountID);
                    this.lstPlayers[indexPlayer].showWinAmount(player.Award, player.Balance);
                }
            }, this);
        },
        showStatus: function (strStatus) {
            if (strStatus != null) {
                this.lbStatus.string = strStatus;
                this.lbStatus.node.parent.active = true;
                this.lbStatus.node.getComponent(cc.Animation).play('notify-checkchi');
            } else {
                this.lbStatus.node.parent.active = false;
            }
        },
        //reset dem nguoc
        activeTimer: function (isActive) {
            // this.lbTime.node.parent.active = isActive;
            this.lbTime.node.active = isActive;
            this.lbDotTime.active = !isActive;
            if (this.interval && !isActive) {
                clearInterval(this.interval);
            }
        },
        //Cap nhat phien
        updateSessionId: function (sID) {
            this.lbSessionID.string = "#"+sID;
        },
        updateMD5: function(sMD5) {
            if (sMD5==null) {
                return;
            }
            this.currentMd5Content = sMD5;
            let array = sMD5.split("|");
            if (array.length>1) {
                this.lbMD5Title.string = "KEY:";
                this.lbResult.string = array[0];
                this.lbKey.string = array[1];
                this.nodeKey.active = true;
                this.nodeMd5.active = false;
            }
            else
            {
                this.lbMD5Title.string = "MD5:";
                this.lbMD5.string = sMD5;
                this.nodeKey.active = false;
                this.nodeMd5.active = true;
            }
        },
        onCopyMD5: function(sender, data){
            cc.Tool.getInstance().copyToClipboard(this.currentMd5Content)
            this.popupCopyMD5.getComponent(cc.Animation).play("popup-fade");
        },
        //Cap nhat thoi gian dem nguoc
        updateTime: function (time) {
            //Clear interval
            if (this.interval) {
                clearInterval(this.interval);
            }
            this.time = parseInt(time);
            this.startTimer();

            this.interval = setInterval(function () {
                this.startTimer();
            }.bind(this), 1000)
        },
        startTimer: function () {
            if (this.time < 0) {
                this.time = 0;
                return;
            }
            this.lbTime.string = this.time;
            this.time--;

        },
        updateRoomTimer: function (time) {
            if (this.lbTime) {
                var timeInt = time;
                this.timeInt = timeInt;

                if (timeInt > 0) {
                    if (timeInt==5&&this.isBetting) {
                        cc.AudioController.getInstance().playSound(cc.AudioTypes.SICBO_COUNT_DOWN);
                        cc.director.getScheduler().schedule(function () {
                            cc.AudioController.getInstance().playSound(cc.AudioTypes.SICBO_COUNT_DOWN);
                        }.bind(this), this, 1, 3, 1, false);
                    }
                    this.lbTime.string = timeInt>9?timeInt:"0"+timeInt;
                    // if (this.currentState === cc.SicBoPharse.EndBetting) {
                    //     this.lbTime.node.color = cc.Color.RED;
                    // } else {
                    //     this.lbTime.node.color = cc.Color.GREEN;
                    // }
                    // if ([cc.SicBoPharse.Waiting, cc.SicBoPharse.None, cc.SicBoPharse.Shaking, cc.SicBoPharse.ShowResult, cc.SicBoPharse.OpenPlate].includes(this.currentState)) {
                    //     this.lbTime.node.color = cc.Color.WHITE;
                    // }
                    this.spCountDownHL.fillRange = timeInt/35;

                }
            }
        },
        //Hien thi tin nhan
        playerShowBubbleChat: function (message) {
            if (message[4] == false && message[3] != cc.LoginController.getInstance().getUserId()) {
                return;
            }
            // if (cc.ChatRoomController.getInstance().checkIsEmotion(message)) {
            //     this.lstPlayers.forEach(function (player) {
            //         let playerNickName = player.nickName;
            //         let nickName = message[0];
            //         if (nickName === playerNickName) {
            //             player.showEmotion(cc.ChatRoomController.getInstance().getIndexEmotion(message)
            //                 , message);
            //         }
            //     });
            // } else {
            //     this.lstPlayers.forEach(function (player) {
            //         let playerNickName = player.nickName;
            //         let nickName = message[0];
            //         if (nickName === playerNickName) {
            //             player.showBubbleChat(message);
            //         }
            //     });
            // }

        },
        //Hien thi tien thang cua user ko ngoi trong ban
        updateTotalUserWin: function (amount) {
            // this.lbTotalUserWin.node.active = false;
            // if (amount != null && amount != 0) {
            //     this.lbTotalUserWin.string = "+" + cc.Tool.getInstance().formatNumber(amount);
            //     this.lbTotalUserWin.node.active = true;
            //     this.lbTotalUserWin.node.scaleY = 0;
            //     this.animTotalUserWin.play('xxWin');
            // }
        },
    });
}).call(this);