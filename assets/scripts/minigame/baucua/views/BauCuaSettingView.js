/*
 * Generated by BeChicken
 * on 11/15/2019
 * version v1.0
 */
(function () {
    cc.BauCuaSettingView = cc.Class({
        "extends": cc.PopupBase,
        properties: {
            animation: cc.Animation,
            nodeOffset: cc.Node,

            nChat: cc.Node,
            nSound: cc.Node,
            nMusic: cc.Node,
            isLobby: false,
        },

        onLoad: function () {
            this.animation = this.node.getComponent(cc.Animation);
            this.node.zIndex = cc.NoteDepth.POPUP_TAIXIU;
        },

        showSetting: function () {
            this.node.active = true;
        },

        onEnable: function () {
            this.animation.play('openPopup');
        },

        start: function () {
            //Check Sound
            this.sound = cc.Tool.getInstance().getItem("@Sound").toString() === 'true';
            this.music = cc.Tool.getInstance().getItem("@Music").toString() === 'true';
            this.chat = true;
            this.move(this.nSound, this.sound ? -30 : 30);
            this.move(this.nMusic, this.music ? -30 : 30);
            this.move(this.nChat, this.chat ? -30 : 30);
        },

        soundClicked: function () {
            this.sound = !this.sound;
            cc.Tool.getInstance().setItem("@Sound", this.sound);
            this.move(this.nSound, this.sound ? -30 : 30);
            if (!this.isLobby) {
                cc.AudioController.getInstance().enableSound(this.sound);
            }
        },

        musicClicked: function () {
            this.music = !this.music;
            cc.Tool.getInstance().setItem("@Music", this.music);
            this.move(this.nMusic, this.music ? -30 : 30);
            if (this.isLobby) {
                cc.LobbyController.getInstance().setIsOnAudioBg();
            } else {
                cc.AudioController.getInstance().enableMusic(this.music);
            }
        },

        chatClicked: function () {
            this.chat = !this.chat;
            this.move(this.nChat, this.chat ? -30 : 30);
        },

        move(node, posX) {
            node.runAction(cc.moveTo(0.2, cc.v2(posX, 0)))
        },

        closeClicked: function () {
            this.animation.play('closePopup');
            var self = this;
            var delay = 0.12;
            cc.director.getScheduler().schedule(function () {
                self.animation.stop();
                if (self.isLobby) {
                    self.node.active = false;
                } else {
                    self.node.destroy();
                }
            }, this, 1, 0, delay, false);
        },

    });
}).call(this)

